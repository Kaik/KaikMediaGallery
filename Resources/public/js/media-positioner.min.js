(function (global) {
    'use strict';

    const mediaPositioner = (...args) => {
        
        var deferred = $.Deferred();
        var $previewContainer;
        var $dragImage;
        var _DRAGGGING_STARTED = 0;
        var _LAST_MOUSEMOVE_POSITION = { x: null, y: null };
        var _DIV_OFFSET = $previewContainer.offset();
        var _CONTAINER_WIDTH = $previewContainer.outerWidth();
        var _CONTAINER_HEIGHT = $previewContainer.outerHeight();
        var _IMAGE_WIDTH;
        var _IMAGE_HEIGHT;
        var _IMAGE_LOADED = 0;
        
	// Set config
	if(typeof args[0] === 'object') {
	    if(args[0].previewContainer !== undefined && args[0].dragImage !== undefined) {
                $previewContainer = args[0].previewContainer;
                $dragImage= args[0].dragImage;
            } else {
                $deffered.rejected('worng arguments used');
            }
	}
        console.log($previewContainer);
        // Check whether image is cached or wait for the image to load 
        // This is necessary before calculating width and height of the image
        if($dragImage.get(0).complete) {
                ImageLoaded();
        }
        else {
                $dragImage.on('load', function() {
                        ImageLoaded();
                });
        }

        // Image is loaded
        function ImageLoaded() {
                _IMAGE_WIDTH = $dragImage.width();
                _IMAGE_HEIGHT = $dragImage.height();
                _IMAGE_LOADED = 1;	
        }

        $previewContainer.on('mousedown', function(event) {
                /* Image should be loaded before it can be dragged */
                if(_IMAGE_LOADED == 1) { 
                        _DRAGGGING_STARTED = 1;

                        /* Save mouse position */
                        _LAST_MOUSE_POSITION = { x: event.pageX - _DIV_OFFSET.left, y: event.pageY - _DIV_OFFSET.top };
                }
        });

        $previewContainer.on('mouseup', function() {
                _DRAGGGING_STARTED = 0;
        });

        $previewContainer.on('mousemove', function(event) {
                if(_DRAGGGING_STARTED == 1) {
                        var current_mouse_position = { x: event.pageX - _DIV_OFFSET.left, y: event.pageY - _DIV_OFFSET.top };
                        var change_x = current_mouse_position.x - _LAST_MOUSE_POSITION.x;
                        var change_y = current_mouse_position.y - _LAST_MOUSE_POSITION.y;

                        /* Save mouse position */
                        _LAST_MOUSE_POSITION = current_mouse_position;

                        var img_top = parseInt($dragImage.css('top'), 10);
                        var img_left = parseInt($dragImage.css('left'), 10);

                        var img_top_new = img_top + change_y;
                        var img_left_new = img_left + change_x;

                        /* Validate top and left do not fall outside the image, otherwise white space will be seen */
                        if(img_top_new > 0)
                                img_top_new = 0;
                        if(img_top_new < (_CONTAINER_HEIGHT - _IMAGE_HEIGHT))
                                img_top_new = _CONTAINER_HEIGHT - _IMAGE_HEIGHT;

                        if(img_left_new > 0)
                                img_left_new = 0;
                        if(img_left_new < (_CONTAINER_WIDTH - _IMAGE_WIDTH))
                                img_left_new = _CONTAINER_WIDTH - _IMAGE_WIDTH;

                       $dragImage.css({ top: img_top_new + 'px', left: img_left_new + 'px' });
                }
        });

        console.log('ttt');
        
        
        return deferred.promise();
//        return true;
//	// Return promise/callvack
//	return new Promise((resolve, reject) => {
//	    input.addEventListener('change', e => {
//		resolve(input.files)
//		const lastArg = args[args.length - 1]
//		if (typeof lastArg === "function") lastArg(input.files)
//
//		// IE10/11 Addition
//		document.body.removeChild(input)
//	    })
//
//	    // Simluate click event
//	    const evt = document.createEvent('MouseEvents');
//	    evt.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);
//	    input.dispatchEvent(evt);
//	})
    }
    // Set either CommonJS/AMD/Global
    if (typeof define === 'function' && define.amd) {
	define(function () { return mediaPositioner; });
    } else if (typeof exports !== 'undefined') {
	if (typeof module !== 'undefined' && module.exports) {
	    exports = module.exports = mediaPositioner;
	}
	exports.mediaPositioner = mediaPositioner;
    } else {
	global.mediaPositioner = mediaPositioner;
    }
})(this);